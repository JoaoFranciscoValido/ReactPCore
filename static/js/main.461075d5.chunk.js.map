{"version":3,"sources":["Tabela.js","Formulario.js","App.js","index.js"],"names":["CabecalhoTabela","CorpoTabela","props","rows","dadosDosComponentes","map","row","nome","src","foto","alt","height","width","descricao","preco","stock","className","onClick","componenteAremover","idComponentes","Tabela","this","inDadosComponentes","componentes","React","Component","Formulario","handlerComponenteChange","evento","test","target","value","setCustomValidity","setState","handlerDescricaoChange","handlerPrecoChange","handlerStockChange","handlerFotoChange","files","handlerSubmitForm","preventDefault","dadosFormulario","Nome","state","UpFotografia","Descricao","Preco","Stock","outDadosFotos","onSubmit","encType","type","onChange","required","accept","getComponentes","a","fetch","resposta","ok","console","error","status","json","adicionaComponentes","dadosNovoComponente","formData","FormData","append","method","body","Error","removeComponente","dadoscomponenteremover","App","handlerremovecomponente","Loadcomponentes","errorMessage","toString","window","location","reload","handlerDadosForm","dadosdoFormulario","loadState","componentesVindosDaAPI","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.461075d5.chunk.js","sourcesContent":["// Tabela.js\n// ****************************************************** \n\nimport React from 'react'\n\n// função que devolve o Cabeçalho da tabela\nfunction CabecalhoTabela() {\n    return (\n        <thead>\n            <tr>\n                {/* <th>Id do Componente</th> */}\n                <th>Nome do Componente</th>\n                <th>Foto do Componente</th>\n                <th>Descrição </th>\n                <th>Preço </th>\n                <th>Stock </th>\n            </tr>\n        </thead>\n    )\n}\n\n// definição da função que devolve o Corpo da tabela\n// faz exatamente o mesmo da linha 7\nconst CorpoTabela = (props) => {\n    // esta função 'interna' irá ler e processar todos\n    // os objetos definidos dentro do array 'dadosDosComponentes'\n    const rows = props.dadosDosComponentes.map((row) => {\n        return (\n            <tr key={row.idComponentes}>\n                {/* <td>{row.idComponentes}</td> */}\n                <td><br></br><br></br>{row.nome}</td>\n                <td><img src={'fotos/' + row.foto}\n                    alt={'foto do ' + row.nome}\n                    height=\"150\" width=\"120\"/>\n                </td>\n                <td><br></br><br></br>{row.descricao}</td>\n                <td><br></br><br></br>{row.preco}</td>\n                <td><br></br><br></br>{row.stock}</td>\n                <td>\n                <br></br><br></br>\n                \n                </td>\n                <td>\n                <br></br><br></br>\n                <button className=\"btn btn-secondary\" onClick={()=>props.componenteAremover(row)}>Delete</button>\n                </td>\n            </tr>\n\n        )\n    })\n\n    // valor devolvido pela função 'CorpoTabela'\n    return (<tbody>{rows}</tbody>)\n}\n\n// componente que junta os dois sub-componentes, \n// formando um novo 'componente'\nclass Tabela extends React.Component {\n    render() {\n\n        // estamos a ler os dados que são recebidos pelo componente\n        // <=> this.props.dadosAlunos\n        const { inDadosComponentes, componentes } = this.props\n\n        return (\n            <table className=\"table table-striped\">\n                <CabecalhoTabela />\n                {/* o parâmetro 'dadoscomponentes' irá receber\n                    os dados que vêm da componente 'mãe' */}\n                <CorpoTabela dadosDosComponentes={inDadosComponentes} componenteAremover={componentes} />\n            </table>\n        );\n    }\n}\n\n\nexport default Tabela\n\n","//Formulario.js\n//este ficheiro irá conter o código para representar o formulário no ecrã\n//********************************* */\n\nimport React from 'react'\n\n\n// /**\n//  * Mostra uma lista com os Componentes existentes,\n//  * para o utilizador escolher um\n//  */\n//  const EscolheComponente = (props) => {\n//     // vamos recuperar os dados do parâmetro de entrada: inListaComponentes\n//     // o 'map' funciona como um 'foreach' que irá iterar todos os items dos dados lidos\n//     const opcoes = props.inListaComponentes.map((componente) => {\n//         return (\n//             <option key={componente.idComponentes}\n//                 required\n//                 value={componente.idComponentes}>{componente.titulo}\n//             </option>\n//         );\n//     }\n//     )\n\n//     return (\n//         <select required className=\"form-select\" onChange={props.outIdComponenteEscolhido}>\n//             <option value=\"\">Escolha um Componente</option>\n//             {opcoes}\n//         </select>\n//     );\n// }\n\n\n\n\n/**\n * Formulário para adicionar (fazer upload) de um Componente\n */\n class Formulario extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        //variáveis para guardar os dados introduzidos pelo utilizador, no formulário\n        this.state = {\n            nome:\"\",\n            foto:null,\n            descricao:\"\",\n            preco:\"\",\n            stock:\"\",\n        } \n    }\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Componente\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerComponenteChange = (evento) =>{\n        //validar os valores introduzidos na TextBox (Impede que o utilizador insira números)\n        if(/\\d/.test(evento.target.value)){\n            evento.target.setCustomValidity(\"Nome do Componente Inválido\");\n            return;\n        }else {\n            evento.target.setCustomValidity(\"\");\n        }\n\n        //guardar os dados recolhidos\n        this.setState({\n            nome: evento.target.value\n        });\n    }\n\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Componente\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerDescricaoChange = (evento) =>{\n        //guardar os dados recolhidos\n        this.setState({\n            descricao: evento.target.value\n        });\n    }\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Componente\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerPrecoChange = (evento) =>{\n        //guardar os dados recolhidos\n        this.setState({\n            preco: evento.target.value\n        });\n    }\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Componente\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerStockChange = (evento) =>{\n       \n        //guardar os dados recolhidos\n        this.setState({\n            stock: evento.target.value\n        });\n    }\n\n\n        // //validar os valores introduzidos na TextBox (Impede que o utilizador insira números)\n        // if(/\\d/.test(evento.target.value)){\n        //     evento.target.setCustomValidity(\"Nome do Componente Inválido\");\n        //     return;\n        // }else {\n        //     evento.target.setCustomValidity(\"\");\n        // }\n\n        // //guardar os dados recolhidos\n        // this.setState({\n        //     nome: evento.target.value\n        // });\n    \n    /**\n     * processar os dados fornecidos pelo utilizador no upload da foto do Componente\n     * @param {} evento - dados adicionados pelo utilizador\n     */\n    handlerFotoChange = (evento) => {\n        //guardar os dados recolhidos \n        this.setState({\n            foto: evento.target.files[0]\n        });\n    }\n\n    /**\n     * handler para processar os dados fornecidos pelo Formulário\n     * @param {*} evento \n     */\n    handlerSubmitForm = (evento) =>{\n        //impedir o formulário de autoenviar os dados para o servidor\n        //essa tarefa cabe ao componente App.js\n        evento.preventDefault();\n        \n        //prepração dos dados para serem enviados para a App.js\n        //podemos já enviar os dados prontos para serem adicionados à API\n        let dadosFormulario = {\n            Nome: this.state.nome,\n            UpFotografia: this.state.foto,\n            Descricao: this.state.descricao,\n            Preco: this.state.preco,\n            Stock: this.state.stock\n        };\n\n        //concretizar a exportação dos dados para a App.js\n        this.props.outDadosFotos(dadosFormulario);\n    }\n\n    render(){\n        // ler os dados que foram/são fornecidos à Tabela5,\n        // como parâmetro de entrada/saída\n        //const { inDadosComponentes } = this.props;\n\n        return(\n            //o 'return' só consegue devolver um objeto\n            <form onSubmit={this.handlerSubmitForm} encType=\"multipart/form-data\">\n                <div className=\"row\">\n                <div className=\"col-md-4\">\n                        {/* Componente: <EscolheComponente inListaComponentes={inDadosComponentes}\n                        outIdComponenteEscolhido={this.handlerComponenteChange}/><br /> */}\n                        Nome do Componente: <input type=\"text\"\n                                value={this.state.nome}\n                                onChange={this.handlerComponenteChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />\n                </div>\n                <div className=\"col-md-4\">  \n                        Foto do Componente: <input type=\"file\" \n                                        required\n                                        accept=\".jpg,.png,.JPG,.PNG\"\n                                        onChange={this.handlerFotoChange}\n                                        className=\"form-control\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Descrição: <input type=\"text\"\n                                value={this.state.descricao}\n                                onChange={this.handlerDescricaoChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Preço: <input type=\"text\"\n                                value={this.state.preco}\n                                onChange={this.handlerPrecoChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Stock: <input type=\"text\"\n                                value={this.state.stock}\n                                onChange={this.handlerStockChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                </div>\n                <br />\n                <br />\n                    <input type=\"submit\" value=\"Adicionar Componente\" className=\"btn btn-secondary\" /><br /><br /> \n            </form>\n            \n        )\n    }\n}\n\nexport default Formulario;","// *****************************************\n// App.js\n// *****************************************\n\nimport React from 'react';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// importar componentes\nimport Tabela from './Tabela';\nimport Formulario from './Formulario';\n\n/**\n * Função que irá ler os dados (Componentes) da API\n */\nasync function getComponentes() {\n\n  // ler os dados da API\n  // https://create-react-app.dev/docs/proxying-api-requests-in-development/\n  let resposta = await fetch(\"api/ComponentesAPI/\");\n\n  if (!resposta.ok) {\n    // não foi recebido o código 200 do HTTP\n    console.error(\"Não conseguimos ler os dados da API. Código: \" + resposta.status);\n  }\n  return await resposta.json();\n}\n\n/**\n * invoca a API e envia os dados do novo Componente\n * @param {} dadosNovoComponente \n */\nasync function adicionaComponentes(dadosNovoComponente) {\n  let formData = new FormData();\n  formData.append(\"Nome\", dadosNovoComponente.Nome);\n  formData.append(\"UpFotografia\", dadosNovoComponente.UpFotografia);\n  formData.append(\"Descricao\", dadosNovoComponente.Descricao);\n  formData.append(\"Preco\", dadosNovoComponente.Preco);\n  formData.append(\"Stock\", dadosNovoComponente.Stock);\n  \n\n\n  // formData.append(\"ComponenteFK\",dadosNovoComponente.ComponenteFK);\n  let resposta = await fetch(\"api/ComponentesAPI\", {\n    method: \"POST\",\n    body: formData\n  });\n\n  //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n  if (!resposta.ok) {\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo Componente. Código= ' + resposta.status);\n  }\n\n  //Devolver os dados a seres usados na componente\n  return await resposta.json();\n}\n\nasync function removeComponente(dadoscomponenteremover) {\n  let formData = new FormData();\n  formData.append(\"idComponentes\", dadoscomponenteremover.idComponentes);\n\n  let resposta = await fetch(\"api/ComponentesAPI/\" + dadoscomponenteremover.idComponentes, {\n    method: \"DELETE\",\n    body: formData\n  });\n\n  //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n  if (!resposta.ok) {\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo Componente. Código= ' + resposta.status);\n  }\n\n  //Devolver os dados a seres usados na componente\n  return await resposta.json();\n\n}\n\n\n\n/**\n * Componente principal do meu projeto\n */\nclass App extends React.Component {\n\n\n  /**\n   * Construtor da classe -> tem sempre este nome\n   */\n  constructor(props) {\n    super(props); // <--- esta É SEMPRE a primeira instrução\n\n    this.state = {\n      /**\n       * array que irá conter os dados dos Componentes, vindas da API\n       */\n       componentes: [],\n      /**\n       * variável para conter o 'estado' da app, \n       * no carregamento dos dados das Fotografias, da API\n       * @type{\"carregando dados\" | \"sucesso\" | \"erro\"}\n       */\n      loadState: \"\",\n      /**\n       * guarda a mensagem de erro, se algo correr mal\n       */\n      errorMessage: null\n    }\n  }\n\n  /**\n   * Quando o objeto é criado, executa o código aqui escrito\n   * Vamos usá-lo para carregar os dados da API\n   */\n  componentDidMount() {\n    // ler os dados dos Componentes e adicioná-los à state 'componentes'\n    this.Loadcomponentes();\n  }\n\n  /**\n   * Carrega os dados dos componentes da API e adiciona-os ao array 'componentes'\n   */\n  async Loadcomponentes() {\n    /* Tarefas:\n     *   1. Ler os dados da API (fetch)\n         2. atualizar os dados na var. state\n     */\n    try {\n      // 1.\n      this.setState({ loadState: \"carregando dados\" });\n      let componentesVindosDaAPI = await getComponentes();\n\n      // 2.\n      // esta não é a forma correta: this.state.fotos = fotosVindosDaAPI;\n      this.setState({\n        componentes: componentesVindosDaAPI,\n        loadState: \"sucesso\"\n      });\n    } catch (erro) {\n      this.setState({\n        loadState: \"erro\",\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro na leitura dos componentes da API\", erro);\n    }\n  }\n\n\n  /**\n * método que sabe identificar o 'anime' que deverá ser retirado da tabela\n * @param {*} idComponentes - dados do anime a remover\n */\n  handlerremovecomponente = async (idComponentes) => {\n    /*\n     * Tarefas:\n     * 1 - preparar os dados para serem enviados para a API\n     * 2 - enviar os dados para a API\n     * 3 - efetuar o reload da tabela \n     */\n    /**\n    * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n    */\n    try {\n      //Ponto 2\n      await removeComponente(idComponentes);\n\n      //Ponto 3\n      await this.Loadcomponentes();\n    } catch (erro) {\n      this.setState({\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro ao submeter os dados do novo componentes; \", erro)\n    }\n    window.location.reload();\n  }\n\n\n  /**\n     * processar os dados recolhidos pelo Formulário\n     * @param {*} dadosDoFormulario \n     */\n\n  handlerDadosForm = async (dadosdoFormulario) => {\n    /* \n     * Tarefas:\n     * 1 - preparar os dados para serem enviados para a API\n     * 2 - enviar os dados para a API\n     * 3 - efetuar o reload da tabela \n     **/\n\n    /*\n     * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n     **/\n\n    try {\n      //Ponto 2\n      await adicionaComponentes(dadosdoFormulario);\n\n      //Ponto 3\n      await this.Loadcomponentes();\n    } catch (erro) {\n      this.setState({\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro ao submeter os dados do novo Componente; \", erro)\n    }\n    window.location.reload();\n  }\n\n\n  render() {\n    //recuperar os dados do 'state' para usar dentro deste método\n    const { componentes } = this.state;\n\n    //determinar o comportamento do 'componente', \n    //em função do seu estado\n    switch (this.state.loadState) {\n      case \"carregando dados\":\n        return <p>A carregar os dados. Aguarde, por favor.</p>\n      case \"erro\":\n        return <p>Ocorreu um erro: {this.state.errorMessage + '.' ?? \"Não sabemos qual\"}</p>\n      case \"sucesso\":\n        return (\n          <div className=\"container\">\n            <h1>Fotografias dos Componentes</h1>\n            {/* adição do Formulário que há-de recolher os dados da nova fotografia */}\n            <Formulario inDadosComponentes={componentes} outDadosFotos={this.handlerDadosForm} />\n\n            <div className=\"row\">\n              <div className=\"col-md-20\">\n                <hr />\n                <h4>Tabela com os Componentes</h4>\n                {/* Tabela5 tem um 'parâmetro de entrada', chamado 'inDadosFotos'.\n                Neste caso, está a receber o array JSON com os dados das fotos dos Componentes,\n                lidos da API */}\n                <Tabela inDadosComponentes={componentes} componentes={this.handlerremovecomponente} />\n              </div>\n            </div>\n          </div>\n        );\n      default: return null;\n    }\n  }\n}\nexport default App;","// **********************************************\n// index.js\n// **********************************************\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}